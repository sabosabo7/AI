{
	// Place your py_prog ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"import atcoder": {
		"prefix": "atcoder",
		"body": [
			"from sys import exit,stdin",
			"input = stdin.readline",
			"import copy",
			"#from collections import deque,Counter",
			"#import numpy as np",
			"",
			""
		],
	},
	"map int input": {
		"prefix": "xn",
		"body": [
			"list(map(int, input().split()))"
		],
	},
	"list map int input": {
		"prefix": "lxn",
		"body": [
			"list(map(int, input().split()))"
		],
	},
	"list map int input for": {
		"prefix": "xlxn",
		"body": [
			"[list(map(int, input().split())) for _ in range($1)]"
		],
	},
	"str input": {
		"prefix": "xs",
		"body": [
			"input().split()"
		],
	},
	"list str input": {
		"prefix": "lxs",
		"body": [
			"input().split()"
		],
	},
	"list str input for": {
		"prefix": "xlxs",
		"body": [
			"[input().split() for _ in range($1)]"
		],
	},
	"BIT": {
		"prefix": "BIT",
		"body": [
			"class BIT:",
			"    def __init__(self, a=0):",
			"		self.n = a",
			"		self.d = [0] * (a + 1)",
			"",
			"	def add(self, i, x=1):",
			"		i += 1",
			"		while i <= self.n:",
			"			self.d[i] += x",
			"			i += i & (-i)",
			"",
			"	def sum(self, *i):",
			"		if len(i) == 1:",
			"			x = 0",
			"			i += 1",
			"			while i:",
			"				x += self.d[i]",
			"				i -= i & (-i)",
			"			return x",
			"		else:",
			"			return sum(self, i[1] - 1) - sum(self, i[0] - 1)"
		]
	}
}